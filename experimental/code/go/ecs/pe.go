// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

import (
	"time"
)

//
type Pe struct {
	//
	OriginalFileName string `ecs:"original_file_name"`

	// Difference Hash (dhash) to find files with a visually similar icon or
	// thumbnail.
	IconHashDhash string `ecs:"icon.hash.dhash"`

	// An array containing an object for each debug entry, if present.
	// The expected fields for this nested object fall under the `debug.`
	// prefix.
	Debug []Debug `ecs:""`

	// List of all imported functions
	Imports string `ecs:"imports"`

	// Data about sections of compiled binary PE
	Sections []Sections `ecs:""`

	// An array containing an object for each PE resource, if present.
	// The expected fields for this nested object fall under the `resources.`
	// prefix.
	Resources []Resources `ecs:""`

	// List of symbols exported by PE
	Exports string `ecs:"exports"`

	// Extracted when possible from the file's metadata. Indicates when it was
	// built or compiled. It can also be faked by malware creators.
	CreationDate time.Time `ecs:"creation_date"`

	// Authentihash of the PE file.
	Authentihash string `ecs:"authentihash"`

	// Compile timestamp of the PE file.
	CompileTimestamp time.Time `ecs:"compile_timestamp"`

	// Name of the compiler
	CompilerName string `ecs:"compiler.name"`

	// Version of the compiler.
	CompilerVersion string `ecs:"compiler.version"`

	// MD5 hash of the header for the PE file.
	RichHeaderHashMd5 string `ecs:"rich_header.hash.md5"`

	// Relative byte offset to the base of the PE file.
	EntryPoint string `ecs:"entry_point"`

	// Machine type of the PE file.
	MachineType string `ecs:"machine_type"`

	// List of packers and tools used.
	Packers string `ecs:"packers"`
}

type Debug struct {
	// Debug offset information.
	Offset string `ecs:"offset"`

	// Size of the debug information.
	Size int64 `ecs:"size"`

	// Information type generated by the debug options.
	Type string `ecs:"type"`

	// Timestamp of the debug information.
	Timestamp time.Time `ecs:"timestamp"`
}

type Resources struct {
	// Chi-square probability distribution.
	Chi2 int64 `ecs:"chi2"`

	// File type of the resources section.
	Filetype string `ecs:"filetype"`

	// Measurement of entropy randomness in the resources section.
	Entropy int64 `ecs:"entropy"`

	// SHA256 hash of resources section.
	Sha256 string `ecs:"sha256"`

	// Language identification.
	Language string `ecs:"language"`

	// Digest of resource types.
	Type string `ecs:"type"`
}

type Sections struct {
	// Chi-square probability distribution.
	Chi2 int64 `ecs:"chi2"`

	// Virtual address available to the file.
	VirtualAddress int64 `ecs:"virtual_address"`

	// Measurement of entropy randomness in the file.
	Entropy float64 `ecs:"entropy"`

	// Section flags of the file.
	Flags string `ecs:"flags"`

	// Section names of the file.
	Name string `ecs:"name"`

	// Size of the section or the dize of the initialized data on disk.
	RawSize int64 `ecs:"raw_size"`
}
